substitutions:
  #Device Information
  device_name: 'power-monitor'
  device_description: 'Usage'
  #ESPHome
  ota_password: '36215290193febd10708246414338486'
  #HomeAssistant
  api_encryption_key: 'tbhrlha8hK0xe1Rvd75SUTVg191k5PN8HCsfyh1gBJY='
  timezone: 'US/Central'
  #Defaults

esphome:
  name: $device_name
  comment: $device_description

esp8266:
  board: nodemcuv2

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap:
    ssid: $device_name
    password: !secret fallback_password

#Enabled Other The Air updates
ota:
  password: $ota_password


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: $api_encryption_key


captive_portal:

# sensor:
#   - platform: ct_clamp
#     sensor: adc_sensor
#     name: "Measured Current"
#     update_interval: 5s        #You may change this value (in seconds)
#     id: measured_current       #Measured in ampere (I)
    
#   # Example source sensor
#   - platform: adc
#     pin: A0
#     id: adc_sensor
    
#   - platform: total_daily_energy
#     name: "Total Daily Power Usage"
#     power_id: my_power

#   - platform: template
#     id: my_power
#     name: "Measured Power"
#     lambda: return id(measured_current).state * 110 / 1000; #Power = V*I/1000.
#     unit_of_measurement: 'kW'
#     update_interval: 5s        #You may change this value (in seconds)

sensor:
  - platform: ct_clamp
    sensor: adc_sensor
    name: "${device_description} True Current"                # This first sensor gets the Amps, note that is set to internal only.
    id: the_clamp
    internal: true
    update_interval: 5s
    filters:
      - calibrate_linear:               # Calibrate your own stuff here, mine is only used for the car charger, therefore I'm pulling approx 28A
        #- 0.00026 -> 0.0
        - 0.00001 -> 0.0
        - 0.025 -> 12.49
        - 0.05 -> 24.99
        - 0.09489 -> 49.99

  - platform: template
    name: "${device_description} Current"             # This sensor is the one that gets seen by HA, if the reading is below 0.1A then it reports 0, keeps your 0 at 0
    id: templated_sensor
    lambda: |-
      if (id(the_clamp).state > 0){
        return (id(the_clamp).state);
      } else {
        return 0.0;
      }
    device_class: current
    update_interval: 5s
    accuracy_decimals: 2
    unit_of_measurement: A

  - platform: template
    name: "${device_description} Watts"               # This sensor converts the Amps to Watts (this is assuming that your voltage is 230, if not change the 230 accordingly)
    id: esp_watts
    lambda: |-
      return id(templated_sensor).state * 120;
    accuracy_decimals: 2
    update_interval: 5s
    device_class: power
    unit_of_measurement: W
                   
  - platform: total_daily_energy        # This sensor will give you a Daily kW reading
    name: "${device_description} Daily Energy"
    unit_of_measurement: 'kW'
    power_id: esp_watts
    filters:
      - multiply: 0.001
    device_class: energy

  - platform: adc
    pin: A0
    id: adc_sensor   

  - platform: ct_clamp
    sensor: adc_sensor
    name: "${device_description} raw values"
    internal: true
    update_interval: 5s
    unit_of_measurement: mA
    accuracy_decimals: 5

time:
  - platform: sntp
    id: my_time
